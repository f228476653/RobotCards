{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","key","Scroll","style","overflow","border","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","componentDidMount","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLocaleLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3d85a535.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nfunction Card(props) {\n    return (\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${props.id}?size=200x200`}></img>\n            <div>\n                <h1>{props.name}</h1>\n                <p>{props.email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","/*\nimport React from 'react';\nimport Card from './Card';\n\nfunction CardList( robots ) {\n    return (\n        <div>\n          {\n            robots.map((user, i) => {\n              return (\n                <Card\n                  key={i}\n                  id={robots[i].id}\n                  name={robots[i].name}\n                  email={robots[i].email}\n                  />\n              );\n            })\n          }\n        </div>\n      );\n}\n\n  \nexport default CardList;\n*/\nimport React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\n/*\nfunction Sroll () {\n    return (\n        <>\n    )\n    \n}\n*/\nconst Scroll = (props) => {\n    return (\n        // render 包在裡面的component\n        <div style = {{ overflow: 'scroll' , border: '5px solid black', height: '800px' }}>\n            { props.children } \n        </div>\n    ) ;\n}\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n      <div className='pa2'>\n        <input\n          className='pa3 ba b--green bg-lightest-blue'\n          type='search'\n          placeholder='search robots'\n          onChange={searchChange}\n        />\n      </div>\n    );\n  }\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    //lifecycle\n    //any error out will run this life cycle\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true})\n    }\n\n    render() {\n        if(this.state.hasError) {\n            return <h1>Oooops. That is not good</h1>\n        } \n        return this.props.children  \n    }\n\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\n//import robots from './robots'\nimport { connect } from 'react-redux';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport './App.css'\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = state => {\n    //recieve a state\n    return{\n        searchField: state.searchRobots.searchField,\n        //in index.js we create a store as state with searchRobots reduxer\n        //reduxer裡的searchRobots\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n//recieve a dispatch which use to send action\n    return {\n        onSearchChange: (event) => dispatch(\n            // dispatch an action \n            setSearchField(event.target.value)\n            //event.target.value === 'the word that user typed'\n        ),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    \n    componentDidMount = () =>{\n        this.props.onRequestRobots();\n    }\n //because we create the store\n /*\n    onSearchChange = (event) =>{ //去查為什麼要用onSearchChange = (event) =>\n        //never do this.state.robots =  'abc'\n        this.setState({ searchfield: event.target.value })\n    }\n*/\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\n        })\n        if (isPending) {\n            return (\n                <div className='tc'>\n                    <h1>RobotFriends</h1>\n                    <h2>Loading...</h2>\n                </div>\n            )\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>RobotFriends</h1>\n                    <SearchBox searchChange={ onSearchChange }/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots ={ filteredRobots }/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )\n        }\n    }\n\n}\nexport default connect( mapStateToProps, mapDispatchToProps )(App);\n//high order component\n//connect function is a higher function that returns another function\n//so connect is going to run the App\n//connect give those props(mapStateToProps,mapDispatchToProps) to the Apps","import { CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED } from './constants.js'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then( response => response.json() )\n        .then( data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch( error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED } from './constants.js'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state= initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            //if search change return a new state\n            return { ...state, searchField: action.payload }\n            //return Object.assign({}, state, searchField: action.payload);\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots:[],\n    error: ''\n}\n\nexport const requestRobots = (state= initialStateRobots, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false})\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'\n//import Hello from '../components/Hello';\nimport App from './containers/App'; //asume it is '.js',if there's no '.css'\nimport * as serviceWorker from './serviceWorker';\n//import CardList from '../components/CardList'\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots,requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger)); \n//It should only be one store in a project\n//You'll have lots of reducers in your application ,\n//but you have to create a root reducer, \n//than use root reducer to create the store\n\nReactDOM.render(\n    <Provider store= {store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n//ReactDOM.render(<Hello />, document.getElementById('root'));\n//ReactDOM.render(<CardList robots={robots}/>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}